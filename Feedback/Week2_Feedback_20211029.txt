Starting code feedback for Eamonn, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.64 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, week4, week3, week2, Feedback, week1

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp
**/results/*
!**/results/.gitkeep
main
requirements.txt

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# My CMEE Coursework Repository

Coursework for MSc of Computational Methods in Ecology and Evolution, at ICL Silwood Park campus.
Work is organised by week (week1, week2 etc.), with each week containing code, data, results and sandbox directories.

Languages currently used: bash, python

Dependencies:
* imagemagick

Software versions:
* Ubuntu 20.04.3 LTS
* Python 3.8.10

Authored by Eamonn Murphy (eamonn.murphy21@imperial.ac.uk)

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: week1, week2, week3, week4

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, sandbox, results, data

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## Week Two

This directory contains scripts written and data needed for them, for week two of CMEE course (Python I).

Languages: python

Dependencies:
* csv
* pickle
* sys
* doctest

Scripts are contained in **code** directory:
* align_seqs.py - find and store the best aligned sequence for the given sequence files
* basic_csv.py
* basic_io1.py
* basic_io2.py
* basic_io3.py
* boilerplate.<span>py
* cfexercises1<span>.py - module to demonstrate control flow
* cfexercises2<span>.py
* control_flow.py - another module to demonstrate control flow
* debugme<span>.py - example buggy function
* dictionary<span>.py - populates a dictionary sorted by order, given a list of species with their orders
* lc1<span>.py - list comprehension exercise
* lc2<span>.py - list comprehension exercise
* loops<span>.py
* MyExampleScript<span>.py
* oaks<span>.py - find just oak tree taxa
* scope<span>.py
* syssargv<span>.py
* test_control_flow<span>.py - control flow exercises
* tuple<span>.py - prints info about bird species from a list
* using_name.<span>py

Data:
* bodymass.csv 
* JustOaksData.csv 
* seq.csv 
* testcsv.csv  
* TestOaksData.csv


**********************************************************************

Found following files in results directory: bestseq.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.5

Found 21 code files: scope.py, debugme.py, lc2.py, control_flow.py, loops.py, basic_io3.py, cfexercises1.py, oaks.py, align_seqs.py, using_name.py, dictionary.py, test_control_flow.py, sysargv.py, tuple.py, cfexercises2.py, basic_io1.py, basic_io2.py, boilerplate.py, MyExampleScript.py, lc1.py, basic_csv.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file scope.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3#
''' Examples to show use of scope'''

_a_global = 10

if _a_global >= 5:
    _b_global = _a_global + 5

def a_function():
    ''' Shows difference between local and global variables'''
    _a_global = 5

    if _a_global >= 5:
        _b_global = _a_global + 5
    
    _a_local = 4
    print("Inside the function, the value of _a_global is ", _a_global)
    print("Inside the function, the value of _b_global is ", _b_global)
    print("Inside the function, the value of _a_local is ", _a_local)

    return None

a_function()

print("Outside the function, the value of _a_global is ", _a_global)
print("Outside the function, the value of _b_global is ", _b_global)

_a_global = 10

def a_function():
    ''' Defines a local variable'''
    _a_local = 4
    print("Inside the function, the value of a_local is", _a_local)
    print("Inside the function, the value of a_global is ", _a_global)

    return None

a_function()

print("Outside the function, the value of _a_global is ", _a_global)

_a_global = 10

print("Outside the function, the value of _a_global is ", _a_global)

def a_function():
    ''' Defines a global function'''
    global _a_global
    _a_global = 5
    _a_local = 4

    print("Inside the function, the value of _a_global is ", _a_global)
    print("Inside the function, the value of _a_local is ", _a_local)

    return None

a_function()

print("Outside the function, the value of _a_global now is", _a_global)

def a_function():
    '''Function with a subfunction'''
    _a_global = 10

    def _a_function2():
        '''Defines a global variable'''
        global _a_global
        _a_global = 20
    
    print("Before calling a_function, value of _a_global is ", _a_global)

    _a_function2()

    print("After calling _a_function2, value of _a_global is ", _a_global)

    return None

a_function()

print("The value of a_global in main workspace / namespace is ", _a_global)

_a_global = 10

def a_function():
    '''Function with a subfunction'''
    def _a_function2():
        '''Defines global'''
        global _a_global
        _a_global = 20
    
    print("Before calling a_function, value of _a_global is ", _a_global)

    _a_function2()
    
    print("After calling _a_function2, value of _a_global is ", _a_global)

a_function()

print("The value of a_global in main workspace / namespace is ", _a_global)
**********************************************************************

Testing scope.py...

scope.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 94.0

Output (only first 500 characters): 


**********************************************************************
Inside the function, the value of _a_global is  5
Inside the function, the value of _b_global is  10
Inside the function, the value of _a_local is  4
Outside the function, the value of _a_global is  10
Outside the function, the value of _b_global is  15
Inside the function, the value of a_local is 4
Inside the function, the value of a_global is  10
Outside the function, the value of _a_global is  10
Outside the function, the value of _a_global is  10
Inside the function, the value of _a_global is
**********************************************************************

Code ran without errors

Time consumed = 0.07668s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
'''Example buggy function'''

def buggyfunc(x):
    y = x
    for i in range(x):
        try:
            y = y-1
            z = x/y
        except ZeroDivisionError:
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This didn't work; x = {x}; y = {y}")
        else:
            print(f"OK; x = {x}; y = {y}, z = {z};")
    return z

buggyfunc(20)
**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 91.5

Output (only first 500 characters): 


**********************************************************************
OK; x = 20; y = 19, z = 1.0526315789473684;
OK; x = 20; y = 18, z = 1.1111111111111112;
OK; x = 20; y = 17, z = 1.1764705882352942;
OK; x = 20; y = 16, z = 1.25;
OK; x = 20; y = 15, z = 1.3333333333333333;
OK; x = 20; y = 14, z = 1.4285714285714286;
OK; x = 20; y = 13, z = 1.5384615384615385;
OK; x = 20; y = 12, z = 1.6666666666666667;
OK; x = 20; y = 11, z = 1.8181818181818181;
OK; x = 20; y = 10, z = 2.0;
OK; x = 20; y = 9, z = 2.2222222222222223;
OK; x = 20; y = 8, z = 2.5;
OK; x = 20; y = 7, 
**********************************************************************

Code ran without errors

Time consumed = 0.07595s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

'''Create tuples based on rainfall data with comprehensions and for loops'''

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.

high_rainfall_months = [pair for pair in rainfall if pair[1] > 100]
print("Months with rainfall > 100mm, with rainfall values:\n", high_rainfall_months)

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm.

low_rainfall_months = [pair[0] for pair in rainfall if pair[1] < 50]
print("Months with rainfall volumes of less than 50mm:\n", low_rainfall_months)

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !).

high_rainfall_months = []
for pair in rainfall:
    if pair[1] > 100:
        high_rainfall_months.append(pair)
print("Months with rainfall > 100mm, with rainfall values:\n", high_rainfall_months)

low_rainfall_months = []
for pair in rainfall:
    if pair[1] < 50:
        low_rainfall_months.append(pair[0])
print("Months with rainfall volumes of less than 50mm:\n", low_rainfall_months)

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.
**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 89.5

Output (only first 500 characters): 


**********************************************************************
Months with rainfall > 100mm, with rainfall values:
 [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Months with rainfall volumes of less than 50mm:
 ['MAR', 'SEP']
Months with rainfall > 100mm, with rainfall values:
 [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Months with rainfall volumes of less than 50mm:
 ['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.07540s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

'''Some functions exemplifying the use of control statements.'''
#docstrings are considered part of the running code (normal comments are
# stripped). Hence, you can access your docstrings at run time.

__author__ = 'Eamonn Murphy (eamonn.murphy21@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def even_or_odd(x=0): # if not specified, x should take value 0.

    '''Find whether a number x is even or odd.'''
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    '''Find which is the largest divisor of x among 2,3,4,5'''
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0:
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else:
        return "No divisor found for %d!" % x
    return 'The largest divisor of %d is %d' % (x, largest)

def is_prime(x=70):
    '''Find whether an integer is prime.'''
    for i in range(2, x):
        if x % i == 0:
            print('%d is not a prime: %d is a divisor' % (x, i))
            return False
    print('%d is a prime!' % x)
    return True

def find_all_primes(x=22):
    '''Find all the primes up to x'''
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if __name__ == '__main__':
    '''Makes sure the 'main' function is called from command line'''
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 85.0

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.07485s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
''' Shows examples of for loops.'''
# FOR loops in Python
for i in range(5):
    print(i)

my_list = [0, 2, 'geronimo!', 3.0, True, False]

for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops in Python
z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print('GERONIMO! infinite loop! ctrl+c to stop!')
# ctrl + c to stop!
**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 83.0

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 11.62213s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
'''Use pickle to manipulate input files'''

########################
# STORING OBJECTS
########################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key":11}

import pickle

f = open('../sandbox/testp.p', 'wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p', 'rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)
**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 81.0

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.17236s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

'''Some mathematical operation functions, including factorials.'''

__author__ = 'Eamonn Murphy (eamonn.murphy21@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys # module to interface our program with the operating system

## functions ##
# Return square root x
def foo_1(x):
    ''' Return square root of x'''
    return x ** 0.5

# Return x and y if x > y, otherwise return y
def foo_2(x, y):
    ''' Return the greater of two numbers'''
    if x > y:
        return x
    return y

# Switch value of x, y, z so that z will be the largest etc.
def foo_3(x,y,z):
    ''' Rearrange some numbers based on their size'''
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x,y,z]

# Return factorial of x
def foo_4(x):
    ''' Return factorial of x'''
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

# a recursive function that calculates the factorial of x
def foo_5(x):
    ''' Return factorial of x through recursive function'''
    if x == 1:
        return 1
    return x * foo_5(x -1)

# Different method of calculating factorial of x
def foo_6(x):
    ''' Another method of calculating factorial of x'''
    facto = 1
    while x >=1:
        facto = facto * x
        x = x -1
    return facto

def main(argv):
    ''' Main argument if imported'''
    print('foo_1(5): ', foo_1(5))
    print('foo_2(4, 5): ', foo_2(4, 5))
    print('foo_3(4, 2, 5): ', foo_3(4, 2, 5))
    print('foo_4(5): ', foo_4(5))
    print('foo_5(4): ', foo_5(4))
    print('foo_6(6): ', foo_6(6))
    return 0

if __name__ == '__main__':
    '''Makes sure the 'main' function is called from command line'''
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 75.5

Output (only first 500 characters): 


**********************************************************************
foo_1(5):  2.23606797749979
foo_2(4, 5):  5
foo_3(4, 2, 5):  [2, 4, 5]
foo_4(5):  120
foo_5(4):  24
foo_6(6):  720

**********************************************************************

Code ran without errors

Time consumed = 0.09283s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
#!usr/bin/env python3
'''Finds just those taxa that are oak trees from a list of species'''

taxa = ['Quercus robur',
        'Fraxinus excelsior',
        'Pinus sylvestris',
        'Quercus cerris',
        'Quercus petraea',
        ]

# check if input is an oak
def is_an_oak(name):
    '''Check if name is an oak'''
    return name.lower().startswith('quercus')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

## create list of oaks using list comprehension
oaks_lc  = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

## get names in UPPER CASE
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)

**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 73.0

Output (only first 500 characters): 


**********************************************************************
{'Quercus robur', 'Quercus cerris', 'Quercus petraea'}
{'Quercus robur', 'Quercus cerris', 'Quercus petraea'}
{'QUERCUS PETRAEA', 'QUERCUS ROBUR', 'QUERCUS CERRIS'}
{'QUERCUS PETRAEA', 'QUERCUS ROBUR', 'QUERCUS CERRIS'}

**********************************************************************

Code ran without errors

Time consumed = 0.07727s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
'''Reads an input sequence file and aligns the sequences.
Saves the alignment and score to a new bestseq.txt file in results directory'''

# Read input .csv files
import csv
with open('../data/seq.csv','r') as f:
    csvread = csv.reader(f)
    for row in csvread:
        seq1 = row[0]
        seq2 = row[1]
    


# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    """ Calculate the score 
    """
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 
print(my_best_align)
print(s1)
print("Best score:", my_best_score)

with open('../results/bestseq.txt', 'w') as f:
    f.write("Best score: " + str(my_best_score) +
    "\n" + my_best_align)

**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 72.5

Output (only first 500 characters): 


**********************************************************************
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTCGGAT
ATCGCCGGATTACGGG
5
 
........------**
........CAATTCGGAT
ATCGCCGGATTACGGG
2
 
.........--*---*
.........CAATTCGGAT
ATCGCCGG
**********************************************************************

Code ran without errors

Time consumed = 0.08297s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: using_name.py
'''Shows the use of the __main__ variable'''

if __name__ == '__main__':
    print('This program is being run by itself')
else:
    print('I am being imported from another module')

print("This module's name is: " + __name__)
**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 70.5

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.07771s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

'''Populate a dictionary using an order key with species'''

taxa = [('Myotis lucifugus', 'Chiroptera'),
        ('Gerbillus henleyi', 'Rodentia',),
        ('Peromyscus crinitus', 'Rodentia'),
        ('Mus domesticus', 'Rodentia'),
        ('Cleithrionomys rutilus', 'Rodentia'),
        ('Microgale dobsoni', 'Afrosoricida'),
        ('Microgale talazaci', 'Afrosoricida'),
        ('Lyacon pictus', 'Carnivora'),
        ('Arctocephalus gazella', 'Carnivora'),
        ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic
# derived from  taxa so that it maps order names to sets of taxa.
#
# An example output is:
#
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc.
#  OR,
# 'Chiroptera': {'Myotis lucifugus'} ... etc

# Create taxa_dic with the correct keys
taxa_dic = {'Rodentia': [], 'Afrosoricida': [],
            'Carnivora': [], 'Chiroptera': []}

# Create a seperate set for each order
rodentia = {pair[0] for pair in taxa if pair[1] == 'Rodentia'}
afrosoricida = {pair[0] for pair in taxa if pair[1] == 'Afrosoricida'}
carnivora = {pair[0] for pair in taxa if pair[1] == 'Carnivora'}
chiroptera = {pair[0] for pair in taxa if pair[1] == 'Chiroptera'}

# Map each set to the correct key in taxa_dic
taxa_dic['Rodentia'] = rodentia
taxa_dic['Chiroptera'] = chiroptera
taxa_dic['Carnivora'] = carnivora
taxa_dic['Afrosoricida'] = afrosoricida

# Print output
print('Afrosoricida: ', taxa_dic['Afrosoricida'])
print('Carnivora: ', taxa_dic['Carnivora'])
print('Chiroptera: ', taxa_dic['Chiroptera'])
print('Rodentia: ', taxa_dic['Rodentia'])

**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 68.5

Output (only first 500 characters): 


**********************************************************************
Afrosoricida:  {'Microgale dobsoni', 'Microgale talazaci'}
Carnivora:  {'Canis lupus', 'Arctocephalus gazella', 'Lyacon pictus'}
Chiroptera:  {'Myotis lucifugus'}
Rodentia:  {'Mus domesticus', 'Peromyscus crinitus', 'Cleithrionomys rutilus', 'Gerbillus henleyi'}

**********************************************************************

Code ran without errors

Time consumed = 0.09637s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

'''Some functions exemplifying the use of control statements.'''
#docstrings are considered part of the running code (normal comments are
# stripped). Hence, you can access your docstrings at run time.

__author__ = 'Eamonn Murphy (eamonn.murphy21@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys # module to interface our program with the operating system
import doctest # Import doctest


## functions ##
def even_or_odd(x=0): # if not specified, x should take value 0.

    '''Find whether a number x is even or odd.
    
    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    Whenever a float is provided, then the closest integer is used:
    >>> even_or_odd(3.2)
    '3 is Odd!'

    In case of negative numbers, the positive is taken:
    >>> even_or_odd(-2)
    '-2 is Even!'

    '''

    # Define function to be tested
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

if __name__ == '__main__':
    '''Makes sure the 'main' function is called from command line'''
    status = main(sys.argv)

doctest.testmod()
**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 65.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!

**********************************************************************

Code ran without errors

Time consumed = 0.11817s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
'''Example use of sys.argv'''

import sys
print("This is the name of the script: ", sys.argv[0])
print('Number of arguments: ', len(sys.argv))
print('The arguments are: ', str(sys.argv))
**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 63.5

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.07406s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

'''Output data from a tuple of tuples to seperate lines'''

birds = (('Passerculus sandwichensis', 'Savannah sparrow', 18.7),
         ('Delichon urbica', 'House martin', 19),
         ('Junco phaeonotus', 'Yellow-eyed junco', 19.5),
         ('Junco hyemalis', 'Dark-eyed junco', 19.6),
         ('Tachycineata bicolor', 'Tree swallow', 20.2),
         )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block
# by species
#
# A nice example output is:
#
# Latin name: Passerculus sandwichensis
# Common name: Savannah sparrow
# Mass: 18.7
# ... etc.

# Hints: use the "print" command! You can use list comprehensions!

for species in birds:
    print('Latin name: ', species[0])
    print('Common name: ', species[1])
    print('Mass: ', species[2])
    print()

**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 61.5

Output (only first 500 characters): 


**********************************************************************
Latin name:  Passerculus sandwichensis
Common name:  Savannah sparrow
Mass:  18.7

Latin name:  Delichon urbica
Common name:  House martin
Mass:  19

Latin name:  Junco phaeonotus
Common name:  Yellow-eyed junco
Mass:  19.5

Latin name:  Junco hyemalis
Common name:  Dark-eyed junco
Mass:  19.6

Latin name:  Tachycineata bicolor
Common name:  Tree swallow
Mass:  20.2


**********************************************************************

Code ran without errors

Time consumed = 0.07383s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
''' Combining loops with conditionals examples'''

def hello_1(x):
    ''' Return hello if divisible by 3'''
    for j in range(12):
        if j % 3 == 0:
            print('hello')
    print(' ')
hello_1(12)

def hello_2(x):
    ''' Return hello if remainders after division are correct'''
    for j in range(15):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')
hello_2(12)

def hello_3(x, y):
    ''' Print hello if i between x and y'''
    for i in range(x, y):
        print('hello')
    print(' ')

def hello_4(z):
    ''' Print hello if statement is true'''
    while z != 15:
        print('hello')
        z = z + 3
    print(' ')

hello_4(0)

def hello_5(z):
    ''' Print hello if one of two statements is true'''
    while z < 100:
        if z == 31:
            for k in range(7):
                print('hello')
        elif z == 18:
            print('hello')
        z = z + 1
    print(' ')

hello_5(12)

def hello_6(x, y):
    ''' While loop with break'''
    while x:
        print("hello!" + str(y))
        y += 1
        if y == 6:
            break
    print(' ')

hello_6(True, 0)
**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 56.5

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
 
hello!0
hello!1
hello!2
hello!3
hello!4
hello!5
 

**********************************************************************

Code ran without errors

Time consumed = 0.07847s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
'''How to read .txt files'''

######################
# FILE INPUT
######################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()
**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 54.5

Output (only first 500 characters): 


**********************************************************************
First Line

Second Line



Third Line



Fourth Line
First Line

Second Line

Third Line

Fourth Line

**********************************************************************

Code ran without errors

Time consumed = 0.07691s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
'''Writing to a file'''

#############
# FILE OUTPUT
#############
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt', 'w')
for i in list_to_save:
    f.write(str(i) + '\n')

f.close()
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 52.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.07638s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

'''This is a boilerplate script.
It prints 'This is a boilerplate', and checks to ensure the function is called.'''

__appname__ = 'boilerplate'
__author__ = 'Eamonn Murphy (eamonn.murphy21@imperial.ac.uk)'
__version__ = '0.0.1'
__licence__ = 'Licence for this code/program'

## imports ##
import sys # module to interface our program with the operating system

## constants ##

## functions ##
def main(argv):
    '''Main entry point of the program'''
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == '__main__':
    '''Makes sure the 'main' function is called from command line'''
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 50.0

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.07469s

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************
#!/usr/bin/env python 3
'''An example script and function to call.'''

def foo(x):
    ''' Returns square of x'''
    x *= x
    print(x)

foo(2)
**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 47.5

Output (only first 500 characters): 


**********************************************************************
4

**********************************************************************

Code ran without errors

Time consumed = 0.07787s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

'''Using list comprehensions and for loops to create lists'''

cobirds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively.



latin_names = [row[0] for row in cobirds]
print("Latin names: \n", latin_names)

common_names = [row[1] for row in cobirds]
print("Common names: \n", common_names)

mean_body_masses = [row[2] for row in cobirds]
print("Mean body masses: \n", mean_body_masses)

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !).

latin_names = []
common_names = []
mean_body_masses = []

for i in cobirds:
    latin_names.append(i[0])
print("Latin names: \n", latin_names)

for i in cobirds:
    common_names.append(i[1])
print("Common names: \n", common_names)

for i in cobirds:
    mean_body_masses.append(i[2])
print("Mean body masses: \n", mean_body_masses)

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 45.5

Output (only first 500 characters): 


**********************************************************************
Latin names: 
 ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names: 
 ['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
Mean body masses: 
 [18.7, 19, 19.5, 19.6, 20.2]
Latin names: 
 ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names: 
 ['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco'
**********************************************************************

Code ran without errors

Time consumed = 0.07547s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
'''Examples of how to open and read csv files'''

import csv

# Read a file containing:
# 'Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)'
with open('../data/testcsv.csv', 'r') as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print('The species is', row[0])

# Write a file containing only species name and Body mass
with open('../data/testcsv.csv', 'r') as f:
    with open('../data/bodymass.csv', 'w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 43.5

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.08363s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 43.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!