ornament %>% group_by(Observer) %>% summarise(count = count(Ornament))
ornament %>% group_by(Observer) %>% summarise(count = count(Year))
ornament %>% group_by(Observer) %>% summarise(count = count())
ornament %>% group_by(Observer) %>% summarise(count())
ornament %>% group_by(Observer) %>% summarise(count(Observer))
lm <- lm(Ornament ~ Observer)
lm <- ornament %>% lm(Ornament ~ Observer)
lm <- lm(Ornament ~ Observer, data = ornament)
plot(lm)
par(c(2,2))
plot(lm)
dev.off()
par(mfrow = c(2,2))
plot(lm)
lm <- lm(Ornament ~ Ornament, data = ornament)
par(mfrow = c(2,2))
plot(lm)
dev.off()
par(mfrow = c(2,2))
plot(lm)
# Colinearity
plot(ornament)
# Relationship of interest
ornament %>% plot(ornament$Ornament ~ ornament$Observer)
dev.off()
# Relationship of interest
ornament %>% plot(ornament$Ornament ~ ornament$Observer)
require(dplyr)
require(lme4)
rm(list = ls())
dev.off()
# Load in the dataset
ornament <- read.table("../data/OrnamentAge.txt", header = TRUE)
head(ornament)
str(ornament)
class(ornament$Observer)
factor(ornament$Observer)
ornament$Observer <- as.factor(ornament$Observer)
str(ornament)
# Check for outliers
plot(ornament$Ornament ~ ornament$Observer)
# Relationship of interest
ornament %>% plot(ornament$Ornament ~ ornament$Observer)
# Relationship of interest
ornament %>% plot(Ornament ~ Observer)
# Relationship of interest
plot(Ornament ~ Observer, data = ornament)
# Create maximal model
lmm <- lmer(Ornament ~ Age + (1|Observer) + (1|Year) + (1|BirdID))
# Create maximal model
lmm <- lmer(Ornament ~ Age + (1|Observer) + (1|Year) + (1|BirdID), data = ornament)
plot(lmm)
summarize(lmm)
summarise(lmm)
# Create maximal model
lmm <- lmer(Ornament ~ Age + (1|Observer) + (1|Year) + (1|BirdID), data = ornament)
summarise(lmm)
summary(lmm)
rm(list = ls())
setwd("../../week3/code")
load("../data/KeyWestAnnualMeanTemperature.RData")
ls()
class(ats)
head(ats)
plot(ats)
cor(Year, Temperature)
cor(Year, Temp)
cor(Year, Temp, data = ats)
cor(data$Year, data$Temp)
cor(ats$Year, ats$Temp)
correlation <- cor(ats$Year, ats$Temp)
cor_vec <- append(cor_vec, cor(ats$Year,
sample(ats$Temp, nrow(ats))))
cor_vec <- c()
for(i in 1:10000){
cor_vec <- append(cor_vec, cor(ats$Year,
sample(ats$Temp, nrow(ats))))
}
head(cor_vec)
num <- sum(cor_vec > correlation)
p_value <- num/10000
browser()
n
browser()
for(i in 1:10000){
browser()
cor_vec <- append(cor_vec, cor(ats$Year,
sample(ats$Temp, nrow(ats))))
}
cor_vec <- c()
for(i in 1:10000){
browser()
cor_vec <- append(cor_vec, cor(ats$Year,
sample(ats$Temp, nrow(ats))))
}
for(i in 1:10000){
cor_vec <- append(cor_vec, cor(ats$Year,
sample(ats$Temp, nrow(ats))))
}
head(cor_vec)
num <- sum(cor_vec > correlation)
p_value <- num/10000
for(i in 1:10000){
cor_vec <- append(cor_vec, cor(ats$Year,
sample(ats$Temp, nrow(ats))))
}
head(cor_vec)
num <- sum(cor_vec > correlation)
p_value <- num/10000
summarise(cor_vec)
range(cor_vec)
mean(cor_vec)
cor_vec <- c()
for(i in 1:100000){
cor_vec <- append(cor_vec, cor(ats$Year,
sample(ats$Temp, nrow(ats))))
}
head(cor_vec)
cor_vec <- c()
for(i in 1:100000){
cor_vec <- append(cor_vec, cor(ats$Year,
sample(ats$Temp, nrow(ats))))
}
head(cor_vec)
num <- sum(cor_vec > correlation)
p_value <- num/10000
p_value <- num/100000
range(cor_vec)
mean(cor_vec)
?cor
View(ats)
correlation <- cor(ats$Year[-1], ats$Temp[-1])
cor_vec <- c()
for(i in 1:100000){
cor_vec <- append(cor_vec, cor(ats$Year,
sample(ats$Temp, nrow(ats))))
}
num <- sum(cor_vec > correlation)
p_value <- num/100000
correlation <- cor(ats$Year[-1], ats$Temp[-1])
cor_vec <- c()
for(i in 1:100000){
cor_vec <- append(cor_vec, cor(ats$Year[-1],
sample(ats$Temp[-1], nrow(ats))))
}
cor_vec <- c()
for(i in 1:10000){
cor_vec <- append(cor_vec, cor(ats$Year[-1],
sample(ats$Temp[-1], nrow(ats))))
}
correlation <- cor(ats$Year[-1], ats$Temp[-1])
cor_vec <- c()
for(i in 1:10000){
cor_vec <- append(cor_vec, cor(ats$Year[],
sample(ats$Temp[], nrow(ats))))
}
num <- sum(cor_vec > correlation)
p_value <- num/100000
correlation <- cor(ats$Year[-c(1,10)], ats$Temp[-c(1,10])
correlation <- cor(ats$Year[-c(1,10)], ats$Temp[-c(1,10)])
cor_vec <- c()
for(i in 1:10000){
cor_vec <- append(cor_vec, cor(ats$Year[],
sample(ats$Temp[], nrow(ats))))
}
num <- sum(cor_vec > correlation)
p_value <- num/100000
correlation <- cor(ats$Year, ats$Temp)
# Calculate correlation between year and temperature
correlation <- cor(ats$Year, ats$Temp, method = "spearman")
# Create empty vector
cor_vec <- c()
# Calculate correlations for randomly shuffled temperatures
for(i in 1:10000){
cor_vec <- append(cor_vec, cor(ats$Year[],
sample(ats$Temp[], nrow(ats)),
method = "spearman"))
}
# Get number of randoms correlations > original and calculate
# p value
num <- sum(cor_vec > correlation)
p_value <- num/100000
source("TreeHeight.R")
View(TreeHts)
class(TreeHts[5,2])
str(TreeHts)
TreeHts <- transform(TreeHts, Distance.m = as.numeric(Distance.m),
Angle.degrees = as.numeric(Angle.degrees),
Tree.Height.m = as.numeric(Tree.Height.m))
str(TreeHts)
source("TreeHeight.R")
source("Ricker.R")
rm(list = ls())
source("Vectorize2.R")
file.edit("Vectorize2.R")
install.packages("knitr")
# load maps package
require(maps)
# load GPDD data
load("../data/GPDDFiltered.RData")
# Create a world map
map()
# Add co-ordinate points to the map
points(gpdd[,3], gpdd[,2], pch = 20, color = gpdd[,1])
file.edit("PP_Dists.R")
require(dplyr)
require(tidyverse)
rm(list = ls())
require(dplyr)
require(tidyverse)
# Read data and look at feeding interaction data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
altered_df <- MyDF %>% subset(select = c(Predator.mass, Prey.mass, Type.of.feeding.interaction))
table(altered_df$Type.of.feeding.interaction)
# Split into seperate DFs based on feeding interaction
pred_pisc <- altered_df %>% filter(Type.of.feeding.interaction == "predacious/piscivorous")
insect <- altered_df %>% filter(Type.of.feeding.interaction == "insectivorous")
pisc <- altered_df %>% filter(Type.of.feeding.interaction == "piscivorous")
plank <- altered_df %>% filter(Type.of.feeding.interaction == "planktivorous")
pred <- altered_df %>% filter(Type.of.feeding.interaction == "predacious")
for (df in c(pred_pisc, insect, pisc, plank, pred)) {
df <- subset(df, select = c(Predator.mass, Prey.mass))
}
c(pred_pisc, insect, pisc, plank, pred) <- c(pred_pisc, insect, pisc, plank, pred) %>%
subset(select = c(Predator.mass, Prey.mass))
print(mean(pred_pisc))
par(mfrow = c(3,2))
rm(list = ls())
require(dplyr)
require(tidyverse)
# Read data and look at feeding interaction data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
altered_df <- MyDF %>% subset(select = c(Predator.mass, Prey.mass, Type.of.feeding.interaction))
table(altered_df$Type.of.feeding.interaction)
par(mfrow = c(3,2))
ls
dev.off()
?density
# Create 5 subplots for predator mass by feeding interaction type
par(mfrow = c(3,2))
density(altered_df$Predator.mass)
plot(density(altered_df$Predator.mass))
?subset
file.edit("PP_Regress.R")
getwd()
file.edit("PP_Regress.R")
# Create 5 subplots for predator mass by feeding interaction type
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset(altered_df$Predator.mass,
altered_df$Type.of.feeding.interaction == type)))
}
?plot
# Create 5 subplots for predator mass by feeding interaction type
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset(log(altered_df$Predator.mass),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Predator Mass")
}
?plot
# Create 5 subplots for predator mass by feeding interaction type
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset(log(altered_df$Predator.mass),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Predator Mass", main = paste(main))
}
# Create 5 subplots for predator mass by feeding interaction type
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset(log(altered_df$Predator.mass),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Predator Mass", main = paste(type))
}
# Create subplots for prey mass by feeding interaction type
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset(log(altered_df$Prey.mass),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Prey Mass", main = paste(type))
}
# Create subplots for size ratios
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset((altered_df$Prey.mass/altered_df$Predator.mass),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Prey Mass", main = paste(type))
}
altered_df <- MyDF %>% subset(select = c(Predator.mass, Prey.mass, Type.of.feeding.interaction))
altered_df$Size.ratio <- (altered_df$Predator.mass/altered_df$Prey.mass)
str(altered_df)
plot(density(subset((altered_df$Size.ratio),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Prey Mass", main = paste(type))
# Create subplots for size ratios
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset((altered_df$Size.ratio),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Prey Mass", main = paste(type))
}
range(altered_df$Size.ratio)
# Create subplots for size ratios
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset((log(altered_df$Size.ratio)),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Prey Mass", main = paste(type))
}
# Create 5 subplots for predator mass by feeding interaction type
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset(log(altered_df$Predator.mass),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Predator Mass", main = paste(type))
}
pdf("../results/Pred_Subplots.pdf")
print()
dev.off()
dev.off()
# Create 5 subplots for predator mass by feeding interaction type
pdf("../results/Pred_Subplots.pdf")
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset(log(altered_df$Predator.mass),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Predator Mass", main = paste(type))
}
dev.off()
# Create subplots for prey mass by feeding interaction type
pdf("../results/Prey_Subplots.pdf")
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset(log(altered_df$Prey.mass),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Prey Mass", main = paste(type))
}
dev.off()
# Create subplots for size ratios
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset((log(altered_df$Size.ratio)),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Prey Mass", main = paste(type))
}
# Create subplots for size ratios
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset((log(altered_df$Size.ratio)),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Predator:Prey Size Ratio", main = paste(type))
}
# Create subplots for size ratios
pdf("../results/SizeRatio_Subplots.pdf")
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset((log(altered_df$Size.ratio)),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Predator:Prey Size Ratio", main = paste(type))
}
dev.off()
source("PP_Dists.R")
print(mean(pred_pisc))
source("PP_Dists.R")
source("PP_Dists.R")
require(dplyr)
source("PP_Dists.R")
require(dplyr)
require(tidyverse)
rm(list = ls())
# Read data and look at feeding interaction data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
altered_df <- MyDF %>% subset(select = c(Predator.mass, Prey.mass, Type.of.feeding.interaction))
altered_df$Size.ratio <- (altered_df$Predator.mass/altered_df$Prey.mass)
table(altered_df$Type.of.feeding.interaction)
source("PP_Dists.R")
source("PP_Dists.R")
source("PP_Dists.R")
?tapply
?ddply
??ddply
require(dplyr)
?ddply
print(mean(pred_pisc))
output_df <- data.frame()
output_df$Names <- c("Predacious/piscivorous", "Insectivorous", "Piscivorous",
"Planktivorous", "Predacious")
require(dplyr)
require(tidyverse)
require(dplyr)
rm(list = ls())
# Read data and look at feeding interaction data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
altered_df <- MyDF %>% subset(select = c(Predator.mass, Prey.mass, Type.of.feeding.interaction))
altered_df$Size.ratio <- (altered_df$Predator.mass/altered_df$Prey.mass)
table(altered_df$Type.of.feeding.interaction)
# Create 5 subplots for predator mass by feeding interaction type
pdf("../results/Pred_Subplots.pdf")
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset(log(altered_df$Predator.mass),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Predator Mass (g)", main = paste(type))
}
dev.off()
# Create subplots for prey mass by feeding interaction type
pdf("../results/Prey_Subplots.pdf")
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset(log(altered_df$Prey.mass),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Prey Mass (g)", main = paste(type))
}
dev.off()
# Create subplots for size ratios
pdf("../results/SizeRatio_Subplots.pdf")
par(mfrow = c(3,2))
for (type in unique(altered_df$Type.of.feeding.interaction)) {
plot(density(subset((log(altered_df$Size.ratio)),
altered_df$Type.of.feeding.interaction == type)),
xlab = "Log of Predator:Prey Size Ratio", main = paste(type))
}
dev.off()
output_df <- data.frame()
output_df$Names <- c("Predacious/piscivorous", "Insectivorous", "Piscivorous",
"Planktivorous", "Predacious")
?data.frame
output_df <- data.frame(names =c("Predacious/piscivorous", "Insectivorous", "Piscivorous",
"Planktivorous", "Predacious"))
View(output_df)
output_df <- data.frame(c("Predacious/piscivorous", "Insectivorous", "Piscivorous",
"Planktivorous", "Predacious"))
View(output_df)
output_df <- data.frame("Predacious/piscivorous", "Insectivorous", "Piscivorous",
"Planktivorous", "Predacious")
View(output_df)
rm(output_df)
output_df <- data.frame("Predacious/piscivorous", "Insectivorous", "Piscivorous",
"Planktivorous", "Predacious")
View(output_df)
output_df <- data.frame(fac = c("Predacious/piscivorous", "Insectivorous", "Piscivorous",
"Planktivorous", "Predacious"))
View(output_df)
output_df <- data.frame(1, 1:10, fac = c("Predacious/piscivorous", "Insectivorous", "Piscivorous",
"Planktivorous", "Predacious"))
View(output_df)
output_df <- data.frame("Predacious/piscivorous" ,
"Insectivorous",
"Piscivorous",
"Planktivorous",
"Predacious")
View(output_df)
output_df <- data.frame("Predacious/piscivorous" = c(),
"Insectivorous" = c(),
"Piscivorous" = c(),
"Planktivorous" = c(),
"Predacious" = c())
View(output_df)
output_df <- data.frame("Predacious/piscivorous" = NULL,
"Insectivorous" = NULL,
"Piscivorous" = NULL,
"Planktivorous" = NULL,
"Predacious" = NULL)
View(output_df)
output_df <- data.frame("Predacious/piscivorous" = NULL,
"Insectivorous" = NULL,
"Piscivorous" = NULL,
"Planktivorous" = NULL,
"Predacious" = NA)
output_df <- data.frame("Predacious/piscivorous" = NA,
"Insectivorous" = NA,
"Piscivorous" = NA,
"Planktivorous" = NA,
"Predacious" = NA)
View(output_df)
View(output_df)
output_df <- data.frame("Predacious/piscivorous" = NA,
"Insectivorous" = NA,
"Piscivorous" = NA,
"Planktivorous" = NA,
"Predacious" = NA,
row.names = c("Log mean predator mass (g)",
"Log mean prey mass (g)",
"Log predator:prey size ratio"))
output_df <- data.frame("Predacious/piscivorous" = c(1:3),
"Insectivorous" = NA,
"Piscivorous" = NA,
"Planktivorous" = NA,
"Predacious" = NA,
row.names = c("Log mean predator mass (g)",
"Log mean prey mass (g)",
"Log predator:prey size ratio"))
View(output_df)
output_df <- data.frame("Log mean predator mass (g)" = c(1:3),
"Log mean prey mass (g)" = c(1:3),
"Log predator:prey size ratio" = c(1:3),
row.names = c("Predacious/piscivorous",
"Insectivorous",
"Piscivorous",
"Planktivorous",
"Predacious"))
View(output_df)
output_df <- data.frame("Log mean predator mass (g)" = c(1:5),
"Log mean prey mass (g)" = c(1:5),
"Log predator:prey size ratio" = c(1:5),
row.names = c("Predacious/piscivorous",
"Insectivorous",
"Piscivorous",
"Planktivorous",
"Predacious"))
?tapply
