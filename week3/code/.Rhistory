install.packages(c("tidyverse"))
?load
source('TAutoCorr.R')
getwd()
cd ../code
getwd("../code")
?getwd
setwd("../code")
getwd
getwd()
source('TAutoCorr.R')
head(temp_data)
source('TAutoCorr.R')
source('TAutoCorr.R')
?load
??clear environment
??environment
head(ats)
?correlation
?cor
class(ats)
base_cor <- cor(ats$Year, ats$Temp)
base_cor
?sample
nrow(ats)
# Repeat this calculation 10000 times by randomly permuting the
# time series, and then recalculating correlation for each year
# sequence (use sample function)
test_sample <- sample(ats$Year, nrow(ats))
replicate(10000, sample(ats$Year, nrow(ats)))
head(replicate(10000, sample(ats$Year, nrow(ats))))
?replicate
source('TAutoCorr.R')
source('TAutoCorr.R')
?c
?rep
source('TAutoCorr.R')
head(cor_vec)
source('TAutoCorr.R')
head(cor_vec)
?size
??size
source('TAutoCorr.R')
p_value
print(p_value)
source('TAutoCorr.R')
print(p_value)
?append
source('TAutoCorr.R')
source('TAutoCorr.R')
rm(list = ls())
source('TAutoCorr.R')
source('TAutoCorr.R')
?nrow
??length
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
print(cor_vec > base_cor)
head(cor_vec)
source('TAutoCorr.R')
head(cor_vec)
print(cor_vec > base_cor)
?rep
?replicate
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
# Repeat this calculation 10000 times by randomly permuting the
# time series, and then recalculating correlation for each year
# sequence (use sample function)
test_sample <- sample(ats, nrow(ats))
base_cor <- cor(ats$Year, ats$Year + 1)
print(base_cor)
head(ats)
100
shift_temp <- ats[2:100,2]
head(shift_temp)
base_cor <- cor(ats$Temp, shift_temp)
base_cor <- cor(ats[1:99,2], shift_temp)
print(base_cor)
source('TAutoCorr.R')
source('TAutoCorr.R')
cor_vec>base_cor
source('TAutoCorr.R')
cor_vec>base_cor
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
print(cor_vec)
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
?head
head(cor_vec, n=20)
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
source('TAutoCorr.R')
rm(list=ls)
rm(list = ls())
source('TAutoCorr.R')
?cor
shift_temp <- ats[2:100]
base_cor <- cor(ats[1:99], shift_temp)
shift_temp <- ats[2:100,]
base_cor <- cor(ats[1:99,], shift_temp)
source('TAutoCorr.R')
head(ats$Year)
head(ats$Temp)
head(shift_temp)
rm = (list = ls())
man rm
?rm
rm(list = ls())
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";",)
class(MyMetaData)
head(MyMetaData)
head(MyData)
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
class(MyData)
head(MyData)
install.packages("reshape2")
?reshape2
??reshape2
a <- T
a
MyMetaData
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
colnames(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
############# Remove row names #############################
rownames(TempData) <- NULL
head(TempData)
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Remove row names #############################
rownames(TempData) <- NULL
head(TempData)
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
?cor
?install.packages
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Remove row names #############################
rownames(TempData) <- NULL
head(TempData)
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
?melt #check out the melt function
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
require(tidyverse)
tidyverse_packages(include_self = TRUE)
tibble::as_tibble(MyWrangledData)
?as_tibble
dplyr::glimpse(MyWrangledData)
dplyr::filter(MyWrangledData, Count>100)
dplyr::slice(MyWrangledData, 10:15)
source('Vectorize2.R')
head(res2)
head(res2[,1])
head(res2[1,])
tail(res2[,1])
?set.seed
set.seed(1)
for (x in 1:100){}
?append
set.seed(1)
for_loops <- c()
for (x in 1:100){
append(for_loops, rnorm(1, 0, 0.5))
}
set.seed(1)
none_loops <- c()
rnorm(100, 0, 0.5)
none_loops <- c()
append(none_loops, rnorm(100, 0, 0.5))
for_loops == none_loops
print(for_loops == none_loops)
head(for_loops)
set.seed(1)
for_loops <- c()
for (x in 1:100){
append(for_loops, rnorm(1, 0, 0.5), 0)
}
set.seed(1)
none_loops <- c()
append(none_loops, rnorm(100, 0, 0.5), 0)
set.seed(1)
for_loops <- c()
for (x in 1:100){
for_loops[x] <- rnorm(1, 0, 0.5)
}
set.seed(1)
none_loops <- c(rnorm(100, 0, 0.5))
for_loops == none_loops
source('Vectorize2.R')
res1 == res2
res1[10,] == res2[10,]
source('Vectorize2.R')
source('Vectorize2.R')
res1 == res2
res1[10,] == res2[10,]
res1[2,] == res2[2,]
res1[,1] == res2[,1]
source('Vectorize2.R')
source('Vectorize2.R')
source('Vectorize2.R')
dim(res1)
?dim
res1[2,] == res2[2,]
res1[1,] == res2[1,]
source('Vectorize2.R')
res1 == res2
source('Vectorize2.R')
source('Vectorize2.R')
source('Vectorize2.R')
source('Vectorize2.R')
source('Vectorize2.R')
res1 == res2
head(res2)
head(res2[10,])
tail(res2[10,])
head(res2[2,])
head(randoms)
source('Vectorize2.R')
source('Vectorize2.R')
source('Vectorize2.R')
source('Vectorize2.R')
source('Vectorize2.R')
source('Vectorize2.R')
res1 == res2
res1[10,] == res2[10,]
res1[10,] == res2[10,]
source('Vectorize2.R')
res1[10,] == res2[10,]
res1 == res2
source('Vectorize2.R')
source('Vectorize2.R')
source('Vectorize2.R')
source('Vectorize2.R')
source('Vectorize2.R')
res1 == res2
res1[10,] == res2[10,]
source('Vectorize2.R')
print(system.time(res1 <- stochrick(numyears = 1000)))
print(system.time(res1 <- stochrickvect(numyears = 1000)))
print(system.time(res1 <- stochrick(numyears = 1000)))
print(system.time(res2 <- stochrickvect(numyears = 1000)))
source('Vectorize2.R')
res1[17,] == res2[17,]
sum(res1 == res2)
source('Vectorize2.R')
sum(res1 == res2)
source('Vectorize2.R')
sum(res1 == res2)
source('Vectorize2.R')
sum(res1 == res2)
source('Vectorize2.R')
?system.time
exT()
require(stats)
exT()
exT <- function(n = 10000){
system.time(for(i in 1:n) x <- mean(rt(1000, df = 4)))
}
exT()
system.time(exT())
rm(list = ls())
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
dim(MyDF)
head(MyDF)
require(tidyverse)
dplyr::glimpse(MyDF)
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location <- as.factor(MyDF$Location)
str(MyDF)
plot(MyDF$Predator.mass, MyDF$Prey.mass)
plot(log(MyDF$Predator.mass), log(MyDF$Prey.mass))
plot(log10(MyDF$Predator.mass), log10(MyDF$Prey.mass))
plot(log10(MyDF$Predator.mass), log10(MyDF$Prey.mass), pch=20)
plot(log10(MyDF$Predator.mass), log10(MyDF$Prey.mass), pch=20, xlab = "Predator Mass (g)", ylab = "Prey mass (g)")
hist(MyDF$Predator.mass)
hist(log10(MyDF$Predator.mass), xlab = "log10(Predator Mass (g))", ylab = "Count")
hist(log10(MyDF$Predator.mass), xlab = "log10(Predator Mass (g))", ylab = "Count", col = "lightblue", border = "pink")
hist(log10(MyDF$Prey.mass), xlab = "log10(Prey Mass (g))", ylab = "Count", col = "lightblue", border = "pink")
par(mfcol = c(2, 1))
par(mfg = c(1, 1))
hist(log10(MyDF$Predator.mass),
xlab = "log10(Predator mass (g))", ylab = "Count", col = "lightblue", border = "pink", main = "Predator")
per(mfg = c(2,1))
par(mfg = c(2,1))
hist(log10(MyDF$Prey.mass), xlab = "log10(Prey Mass (g)", ylab = "Count",
col = "lightgreen", border = "pink", main = "Prey")
dev.off()
par(mfcol = c(2, 1))
par(mfg = c(2,1))
xlab = "log10(Predator mass (g))", ylab = "Count", col = "lightblue", border = "pink", main = "Predator")
hist(log10(MyDF$Predator.mass),
xlab = "log10(Predator mass (g))", ylab = "Count", col = "lightblue", border = "pink", main = "Predator")
par(mfg = c(2,1))
hist(log10(MyDF$Prey.mass), xlab = "log10(Prey Mass (g)", ylab = "Count",
col = "lightgreen", border = "pink", main = "Prey")
dev.off()
hist(log10(MyDF$Predator.mass),)
hist(log10(MyDF$Predator.mass),
xlab = "log10(Body Mass (g))", ylab = "Count",
col = rgb(1, 0, 0, 0.5),
main = "Predator-prey size overlap")
hist(log10(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = TRUE)
legend("topleft", c("Predators", "Prey"),
fill = c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5)))
?hist
hist(log10(MyDF$Predator.mass), breaks = 10,
xlab = "log10(Body Mass (g))", ylab = "Count",
col = rgb(1, 0, 0, 0.5),
main = "Predator-prey size overlap")
hist(log10(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = TRUE, breaks - 10)
hist(log10(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = TRUE, breaks = 10)
legend("topleft", c("Predators", "Prey"),
fill = c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5)))
dev.off()
boxplot(log10(MyDF$Predator.mass), xlab = "Location",
ylab = "log10(Predator mass)", main = "Predator mass")
boxplot(log(MyDF$Predator.mass) ~ MyDF$Location,
xlab = "Location", ylab = "Predator mass",
main = "Predator mass by location")
boxplot(log(MyDF$Predator.mass) ~ MyDF$Type.of.feeding.interaction,
xlab = "Location", ylab = "Predator mass",
main = "Predator mass by feeding interaction type")
dev.off()
par(fig = c(0, 0,8, 0, 0.8))
par(fig=c(0,0.8,0,0.8))
plot(log(MyDF$Predator.mass), log(MyDF$Prey.mass), xlab = "Predator mass (g)")
par(fig=c(0,0.8,0.4,1))
boxplot(log(MyDF$Predator.mass), horizontal = TRUE, axes = FALSE)
par(fig=c(0.55), 1, 0, 0.8), new = TRUE)
par(fig=c(0.55, 1, 0, 0.8), new = TRUE)
boxplot(log(MyDF$Prey.mass), axes = FALSE)
mtext("Fancy Predator-prey scatterplot", side = 3, outer = TRUE, line = -3)
plot(log(MyDF$Predator.mass), log(MyDF$Prey.mass), xlab = "Predator mass (g)")
par(fig=c(0,0.8,0,0.8))
plot(log(MyDF$Predator.mass), log(MyDF$Prey.mass), xlab = "Predator mass (g)", add = TRUE)
pdf("../results/Pred_Prey_Overlay.pdf", 11.7, 8.3)
head(warnings())
hist(log(MyDF$Predator.mass), xlab = "Body Mass (g)", ylab = "Count",
col = rgb(1,0,0,0.5), main = "Predators", breaks = 10)
hist(log(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = TRUE, breaks = 10)
legend("topleft", c("Predators", "Prey"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)))
graphics.off()
require(ggplot2)
qplot(Prey.mass, Predator.mass, data = MyDF)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction, asp = 1)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = "red")
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = I("red")
)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, shape = "3")
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, shape = 3)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, shape = I(3))
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction, asp = 1, alpha = I(0.5))
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction, asp = 1, alpha = 0.5)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction, asp = 1, alpha = 0.5, geom = c("point", "smooth"))
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, asp = 1, alpha = 0.5, geom = c("point", "smooth"))
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, asp = 1, alpha = 0.5, geom = c("point", "smooth") + geom_smooth(method = "lm"))
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, asp = 1, alpha = 0.5, geom = c("point", "smooth")) + geom_smooth(method = "lm")
